{"version":3,"sources":["components/clock.js","components/countries.js","index.js"],"names":["Clock","props","state","hours","minutes","seconds","handleDate","bind","this","clockInterval","setInterval","clearInterval","date","Date","offset","currentOffset","getTimezoneOffset","UTCTime","getTime","remoteTime","getHours","getMinutes","getSeconds","setState","getUTCHours","getUTCMinutes","getUTCSeconds","hourStyle","transform","minuteStyle","secondStyle","zone","className","style","id","React","Component","ctzone","require","Countries","selectedTimezone","selectedOffset","countryList","getAllCountries","htmlFor","name","onChange","pickEvent","target","value","Object","entries","map","item","label","timezones","ClockContainer","selectedZone","setTimezone","getTimezone","utcOffset","ReactDOM","render","display","margin","document","getElementById"],"mappings":"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","file":"static/js/main.44b28853.chunk.js","sourcesContent":["import React from \"react\";\n\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hours: null,\n            minutes: null,\n            seconds: null,\n        };\n        this.handleDate = this.handleDate.bind(this);\n    }\n\n    componentDidMount() {\n        this.clockInterval = setInterval(this.handleDate, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.clockInterval);\n    }\n\n    handleDate() {\n        let date = new Date();\n        let offset = (this.props.offset) ? this.props.offset : 0;\n        offset = offset / 60;\n        if (offset === 0) {\n            this.setState({\n                hours: date.getUTCHours(),\n                minutes: date.getUTCMinutes(),\n                seconds: date.getUTCSeconds(),\n            });\n            return;\n        }\n        let currentOffset = date.getTimezoneOffset() * 60000;\n        let UTCTime = date.getTime() + currentOffset;\n        let remoteTime = new Date(UTCTime + (3600 * 1000 * (offset)));\n\n        let hours = remoteTime.getHours();\n        let minutes = remoteTime.getMinutes();\n        let seconds = remoteTime.getSeconds();\n\n        this.setState({\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n        });\n    }\n\n    render() {\n        let hourStyle = {\n            transform: `rotate(${this.state.hours * 30}deg)`,\n        };\n\n        let minuteStyle = {\n            transform: `rotate(${this.state.minutes * 6}deg)`\n        };\n\n        let secondStyle = {\n            transform: `rotate(${this.state.seconds * 6}deg)`\n        };\n        \n        let zone = (this.props.zone) ? this.props.zone : \"UTC\";\n\n        return (\n            <div className={\"clock\"}>\n                <h3>Time</h3>\n                <div className={\"analog-clock\"}>\n                    <div className={\"numbers\"}>\n                        <div className={\"hour-12\"}>12</div>\n                        <div className={\"hour-6\"}>6</div>\n                        <div className={\"hour-3\"}>3</div>\n                        <div className={\"hour-9\"}>9</div>\n                    </div>\n\n                    <div className={\"dial\"}>\n\n                        <div className={\"seconds\"} style={secondStyle}>\n                            <svg className={\"seconds-svg\"}>\n                                <rect className={\"seconds-tick\"} />\n                            </svg>\n                        </div>\n\n                        <div className={\"minutes\"} style={minuteStyle}>\n                            <svg className={\"minutes-svg\"}>\n                                <rect className={\"minutes-tick\"} />\n                            </svg>\n                        </div>\n\n                        <div className={\"hours\"} style={hourStyle}>\n                            <svg className={\"hours-svg\"}>\n                                <rect className={\"hours-tick\"} />\n                            </svg>\n                        </div>\n\n                    </div>\n                    <div className={\"pin-cover\"}>\n                        <div id={\"pin\"}></div>\n                    </div>\n                </div>\n                <div className={\"zone-info\"}>\n                    {zone}\n                </div>\n                <div className={\"digital-clock\"}>\n                    {(this.state.hours > 10) ? this.state.hours : `0${this.state.hours}`}:\n                    {(this.state.minutes > 10) ? this.state.minutes : `0${this.state.minutes}`}:\n                    {(this.state.seconds > 10) ? this.state.seconds : `0${this.state.seconds}`}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Clock;","import React from \"react\";\nconst ctzone = require('countries-and-timezones');\n\n\nclass Countries extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTimezone: null,\n            selectedOffset: null,\n        };\n    }\n\n    render() {\n        let countryList = ctzone.getAllCountries();\n        return (<div className=\"country-list\">\n            <label htmlFor={\"country-list\"} className={\"country-list-label\"}>\n                Select Timezone: \n            </label>\n\n            <select name={\"country-list\"} id={\"country-list\"} onChange={pickEvent => this.props.onChange(pickEvent.target.value)}>\n                <option key={\"UTC\"}>{\"UTC\"}</option>\n                {Object.entries(countryList).map(\n                    (item) => \n                    <optgroup key={item[0]} label={item[1].name}>\n                        {item[1].timezones.map((value) => <option key={value}>{value}</option>)}\n                    </optgroup>\n                )}\n            </select>\n        </div>);\n    }\n}\n\nexport default Countries;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './assets/style.scss';\nimport Clock from \"./components/clock\";\nimport Country from \"./components/countries\"\n\nconst ctzone = require('countries-and-timezones');\n\nclass ClockContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedZone: null,\n            selectedOffset: null,\n        };\n        this.setTimezone = this.setTimezone.bind(this);\n    }\n\n    setTimezone(zone) {\n        this.setState({\n            selectedZone: zone,\n            selectedOffset: ctzone.getTimezone(zone).utcOffset,\n        });\n    }\n\n    render() {\n        return(\n            <div className={\"int-clock-container\"}>\n                <Country onChange={this.setTimezone}></Country>\n                <Clock zone={this.state.selectedZone} offset={this.state.selectedOffset}></Clock>\n            </div>\n        );\n    }\n\n}\n\n//\nReactDOM.render(\n    <div style={{display: \"flex\", margin: \"30px\"}}>\n        <ClockContainer></ClockContainer>\n    </div>,\n    document.getElementById(\"root\"),\n);"],"sourceRoot":""}